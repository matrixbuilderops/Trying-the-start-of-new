# ModelBuilder.py
# Generates a new AI model file (QTL-compatible) from blueprint definitions

from pathlib import Path
import json

def build_model_from_blueprint(blueprint_path: str, output_path: str):
    with open(blueprint_path, 'r') as file:
        blueprint = json.load(file)
    
    model_name = blueprint.get("model_name", "UnnamedModel")
    architecture = blueprint.get("architecture", "GPT2")
    components = blueprint.get("components", [])
    enhancements = blueprint.get("enhancements", [])
    
    qtl_content = f"# QTLHook\nModelName: {model_name}\nArchitecture: {architecture}\n"
    for comp in components:
        qtl_content += f"Component: {comp}\n"
    for enh in enhancements:
        qtl_content += f"Enhancement: {enh}\n"
    
    qtl_content += "\n# AutoGenerated by MindBuilder\n"

    output_file = Path(output_path) / f"{model_name}.qtl"
    with open(output_file, 'w') as f:
        f.write(qtl_content)
    
    print(f"Model file created: {output_file}")

# Example usage
# build_model_from_blueprint("Blueprints/GPT_Exo.json", "OutputModels/")

